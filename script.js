// Mobile Menu Toggle document.addEventListener('DOMContentLoaded', function() { // Mobile menu functionality const mobileMenuBtn = document.getElementById('mobileMenuBtn'); const navLinks = document.getElementById('navLinks'); if (mobileMenuBtn && navLinks) { mobileMenuBtn.addEventListener('click', (e) => { e.stopPropagation(); navLinks.classList.toggle('active'); }); // Close mobile menu when clicking outside document.addEventListener('click', (e) => { if (!e.target.closest('nav')) { navLinks.classList.remove('active'); } }); } // Smooth scrolling for anchor links document.querySelectorAll('a[href^="#"]').forEach(anchor => { anchor.addEventListener('click', function(e) { e.preventDefault(); if (this.getAttribute('href') === '#') return; const targetId = this.getAttribute('href'); const targetElement = document.querySelector(targetId); if (targetElement) { window.scrollTo({ top: targetElement.offsetTop - 80, behavior: 'smooth' }); // Close mobile menu after clicking a link if (navLinks) { navLinks.classList.remove('active'); } } }); }); // Form submission handling const forms = document.querySelectorAll('form'); forms.forEach(form => { form.addEventListener('submit', (e) => { e.preventDefault(); // Get form inputs const formInputs = form.querySelectorAll('input, textarea'); let isValid = true; // Simple validation formInputs.forEach(input => { if (input.hasAttribute('required') && !input.value.trim()) { isValid = false; input.style.borderColor = 'red'; } else { input.style.borderColor = ''; } }); if (isValid) { // Simulate form submission const submitBtn = form.querySelector('button[type="submit"]'); const originalText = submitBtn.textContent; submitBtn.textContent = 'Submitting...'; submitBtn.disabled = true; // Simulate API call setTimeout(() => { // Reset form form.reset(); // Show success message alert('Thank you for your submission!'); // Reset button submitBtn.textContent = originalText; submitBtn.disabled = false; }, 1500); } }); }); // Pet Gallery Filtering const filterBtn = document.querySelector('.filter-btn'); const petCards = document.querySelectorAll('.pet-card'); if (filterBtn && petCards.length > 0) { filterBtn.addEventListener('click', () => { const typeFilter = document.getElementById('pet-type').value; const ageFilter = document.getElementById('pet-age').value; const sizeFilter = document.getElementById('pet-size').value; petCards.forEach(card => { const typeMatch = typeFilter === 'all' || card.dataset.type === typeFilter; const ageMatch = ageFilter === 'all' || card.dataset.age === ageFilter; const sizeMatch = sizeFilter === 'all' || card.dataset.size === sizeFilter; if (typeMatch && ageMatch && sizeMatch) { card.style.display = 'block'; } else { card.style.display = 'none'; } }); }); } // Featured Pets Carousel const track = document.getElementById('petCarousel'); const slides = Array.from(track?.children || []); const nextButton = document.getElementById('nextBtn'); const prevButton = document.getElementById('prevBtn'); const indicators = document.querySelectorAll('.carousel-indicator'); if (track && slides.length > 0 && nextButton && prevButton) { let currentIndex = 0; // Set up the carousel const slideWidth = slides[0].getBoundingClientRect().width; // Arrange the slides next to one another const setSlidePosition = (slide, index) => { slide.style.left = slideWidth * index + 'px'; }; slides.forEach(setSlidePosition); const moveToSlide = (targetIndex) => { // Bound the target index to valid values targetIndex = Math.max(0, Math.min(targetIndex, slides.length - 1)); track.style.transform = 'translateX(-' + (slideWidth * targetIndex) + 'px)'; currentIndex = targetIndex; // Update indicators indicators.forEach((indicator, index) => { if (index === currentIndex) { indicator.classList.add('active'); } else { indicator.classList.remove('active'); } }); }; // Click handlers for next and previous buttons nextButton.addEventListener('click', () => { moveToSlide(currentIndex + 1); }); prevButton.addEventListener('click', () => { moveToSlide(currentIndex - 1); }); // Click handlers for indicators indicators.forEach((indicator, index) => { indicator.addEventListener('click', () => { moveToSlide(index); }); }); // Auto-advance the carousel setInterval(() => { moveToSlide((currentIndex + 1) % slides.length); }, 5000); } // Donation amount selection const amountButtons = document.querySelectorAll('.amount-btn'); if (amountButtons.length > 0) { amountButtons.forEach(button => { button.addEventListener('click', () => { // Remove active class from all buttons in the same container const container = button.closest('.donation-amounts'); container.querySelectorAll('.amount-btn').forEach(btn => { btn.classList.remove('active'); }); // Add active class to clicked button button.classList.add('active'); // Handle custom amount if (button.classList.contains('custom-amount')) { const amount = prompt('Enter custom amount:'); if (amount) { button.textContent = '$' + amount; } else { button.classList.remove('active'); } } }); }); } // Animate stats counter const animateCounter = (element, target, duration) => { let start = 0; const increment = target / (duration / 16); // 60fps const updateCounter = () => { start += increment; const current = Math.min(Math.round(start), target); element.textContent = current.toLocaleString(); if (current < target) { requestAnimationFrame(updateCounter); } }; updateCounter(); }; // Intersection Observer for animations const observeElements = () => { const observer = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { // Start counter animations when stats section is visible if (entry.target.id === 'adoptionsCount') { animateCounter(entry.target, 15000, 2000); } else if (entry.target.id === 'sheltersCount') { animateCounter(entry.target, 250, 2000); } else if (entry.target.id === 'statesCount') { animateCounter(entry.target, 45, 2000); } // Add animation classes when elements are visible if (entry.target.classList.contains('animate__animated')) { const animationClass = 'animate__fadeIn'; entry.target.classList.add(animationClass); } observer.unobserve(entry.target); } }); }, { threshold: 0.1 }); // Observe stats counters document.querySelectorAll('#adoptionsCount, #sheltersCount, #statesCount').forEach(el => { observer.observe(el); }); // Observe animated elements document.querySelectorAll('.animate__animated').forEach(el => { observer.observe(el); }); }; observeElements(); // Add floating animation to certain elements document.querySelectorAll('.hero-image, .cta-icon, .donation-icon').forEach(el => { el.classList.add('float-animation'); }); // Add pulse animation to buttons document.querySelectorAll('.primary-btn, .donation-btn').forEach(el => { el.classList.add('pulse-animation'); }); // Responsive viewport check function checkViewport() { if (window.innerWidth <= 768) { document.querySelectorAll('.steps-grid, .cta-grid').forEach(grid => { if (window.innerWidth <= 576) { grid.style.gridTemplateColumns = '1fr'; } else { grid.style.gridTemplateColumns = 'repeat(2, 1fr)'; } }); } else { document.querySelectorAll('.steps-grid, .cta-grid').forEach(grid => { grid.style.gridTemplateColumns = 'repeat(3, 1fr)'; }); } } // Run on load and resize checkViewport(); window.addEventListener('resize', checkViewport); });
